{"version":3,"sources":["logo.svg","Home.tsx","App.tsx","serviceWorker.ts","index.tsx","Home.module.css"],"names":["module","exports","processText","s","processHTML","Home","useState","value","setValue","imgHeight","setImgHeight","ref","useRef","setRandomValue","useCallback","String","Math","random","setTimeout","editor","current","focus","insertEmoji","insertText","insertHTML","handleImgHeight","e","target","useEffect","document","title","className","styles","EditorBlock3","HomeHeader","src","logo","HomeLogo","alt","HomeLink","href","rel","EditorButton","onClick","type","InputControl","onChange","style","display","marginTop","flex","wordBreak","dangerouslySetInnerHTML","__html","border","minWidth","maxWidth","width","handlerStyle","backgroundColor","EditorWrap3","placeholder","allowInWebDrop","Editor","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,6MCMrCC,EAAc,SAACC,GAAD,OAAeA,GAC7BC,EAAc,SAACD,GAAD,OAAeA,GAEtBE,EAAiB,WAC5B,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBAAS,QAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACMC,EAAMC,iBAAuB,MAE7BC,EAAiBC,uBAAY,WACjCN,EAASO,OAAOC,KAAKC,WAGrBC,YAAW,WACT,IAAMC,EAASR,EAAIS,QACfD,GAAQA,EAAOE,aAEpB,IAEGC,EAAcR,uBAAY,WAC9B,IAAMK,EAASR,EAAIS,QACfD,GAAQA,EAAOI,WAAW,oBAC7B,IAEGC,EAAaV,uBAAY,WAC7B,IAAMK,EAASR,EAAIS,QACfD,GACFA,EAAOK,WAEL,kDAEH,IAEGC,EAAkBX,uBAAY,SAAAY,GAClChB,EAAagB,EAAEC,OAAOpB,SACrB,IAMH,OAJAqB,qBAAU,WACRC,SAASC,MAAQ,sBAChB,IAGD,yBAAKC,UAAWC,IAAO3B,MACrB,0CAAY2B,IAAOC,aAAnB,0BAAiDxB,EAAjD,OAEA,4BAAQsB,UAAWC,IAAOE,YACxB,yBAAKC,IAAKC,IAAML,UAAWC,IAAOK,SAAUC,IAAI,SAChD,uBACEP,UAAWC,IAAOO,SAClBC,KAAK,6CACLb,OAAO,SACPc,IAAI,uBAJN,sBAUF,6BAASV,UAAWC,IAAOC,cACzB,6BACE,4BAAQF,UAAWC,IAAOU,aAAcC,QAAS9B,GAAjD,cAGA,4BAAQkB,UAAWC,IAAOU,aAAcC,QAASrB,GAAjD,gBAGA,4BAAQS,UAAWC,IAAOU,aAAcC,QAASnB,GAAjD,eAGA,2BACEoB,KAAK,OACLb,UAAWC,IAAOa,aAClBtC,MAAOE,EACPqC,SAAUrB,KAGd,yBAAKsB,MAAO,CAAEC,QAAS,OAAQC,UAAW,KACxC,yBACEF,MAAO,CAAEG,KAAM,EAAGC,UAAW,cAC7BC,wBAAyB,CAAEC,OAAQ9C,KAErC,kBAAC,IAAD,CACE+C,OAAO,OACPP,MAAO,CAAEQ,SAAU,MAAOC,SAAU,MAAOC,MAAO,OAClDC,aAAc,CAAEC,gBAAiB,uBAEjC,yBAAK5B,UAAWC,IAAO4B,aACrB,kBAAC,IAAD,CACEjD,IAAKA,EACLkD,YAAY,8CACZC,gBAAc,EACd/B,UAAWC,IAAO+B,OAClB3D,YAAaA,EACbF,YAAaA,EACbK,MAAOA,EACPuC,SAAUtC,UC9FbwD,EAAgB,WAC3B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,U,MCEUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5C,SAAS6C,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBE1InBhF,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,iBAAiB,6BAA6B,WAAa,yBAAyB,SAAW,uBAAuB,OAAS,qBAAqB,aAAe,2BAA2B,aAAe,2BAA2B,aAAe,2BAA2B,YAAc,6B","file":"static/js/main.53e35561.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { DragSizing } from 'react-drag-sizing';\nimport { Editor, EditorRefAttrs } from 'react-editor';\nimport styles from './Home.module.css';\nimport logo from './logo.svg';\n\nconst processText = (s: string) => s; // noop\nconst processHTML = (s: string) => s; // todo limit\n\nexport const Home: React.FC = () => {\n  const [value, setValue] = useState('');\n  const [imgHeight, setImgHeight] = useState('40px');\n  const ref = useRef<EditorRefAttrs>(null);\n\n  const setRandomValue = useCallback(() => {\n    setValue(String(Math.random()));\n\n    // wait for editor render\n    setTimeout(() => {\n      const editor = ref.current;\n      if (editor) editor.focus();\n    });\n  }, []);\n\n  const insertEmoji = useCallback(() => {\n    const editor = ref.current;\n    if (editor) editor.insertText('\b😁');\n  }, []);\n\n  const insertHTML = useCallback(() => {\n    const editor = ref.current;\n    if (editor)\n      editor.insertHTML(\n        // '&nbsp;\b<span contenteditable=\"false\" class=\"atwho-item\">@fritx</span>&nbsp;'\n        '<img src=\"./static/media/logo.5d5d9eef.svg\">'\n      );\n  }, []);\n\n  const handleImgHeight = useCallback(e => {\n    setImgHeight(e.target.value);\n  }, []);\n\n  useEffect(() => {\n    document.title = 'react-drag-sizing';\n  }, []);\n\n  return (\n    <div className={styles.Home}>\n      <style>{`.${styles.EditorBlock3} img { height: ${imgHeight} }`}</style>\n\n      <header className={styles.HomeHeader}>\n        <img src={logo} className={styles.HomeLogo} alt=\"logo\" />\n        <a\n          className={styles.HomeLink}\n          href=\"https://github.com/fritx/react-drag-sizing\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          react-drag-sizing\n        </a>\n      </header>\n\n      <section className={styles.EditorBlock3}>\n        <div>\n          <button className={styles.EditorButton} onClick={setRandomValue}>\n            Set Random\n          </button>\n          <button className={styles.EditorButton} onClick={insertEmoji}>\n            Insert Emoji\n          </button>\n          <button className={styles.EditorButton} onClick={insertHTML}>\n            Insert HTML\n          </button>\n          <input\n            type=\"text\"\n            className={styles.InputControl}\n            value={imgHeight}\n            onChange={handleImgHeight}\n          />\n        </div>\n        <div style={{ display: 'flex', marginTop: 10 }}>\n          <div\n            style={{ flex: 1, wordBreak: 'break-word' }}\n            dangerouslySetInnerHTML={{ __html: value }}\n          />\n          <DragSizing\n            border=\"left\"\n            style={{ minWidth: '15%', maxWidth: '85%', width: '50%' }}\n            handlerStyle={{ backgroundColor: 'rgba(0, 0, 0, 0.2)' }}\n          >\n            <div className={styles.EditorWrap3}>\n              <Editor\n                ref={ref}\n                placeholder=\"Try to drag on the left border 🤚\"\n                allowInWebDrop\n                className={styles.Editor}\n                processHTML={processHTML}\n                processText={processText}\n                value={value}\n                onChange={setValue}\n              />\n            </div>\n          </DragSizing>\n        </div>\n      </section>\n    </div>\n  );\n};\n","// import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Home } from './Home';\n\nexport const App: React.FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact>\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__jw9yQ\",\"HomeLogo\":\"Home_HomeLogo__3qjOs\",\"Home-logo-spin\":\"Home_Home-logo-spin__-aFHo\",\"HomeHeader\":\"Home_HomeHeader__1n3dH\",\"HomeLink\":\"Home_HomeLink__1HuIq\",\"Editor\":\"Home_Editor__21Dn4\",\"InputControl\":\"Home_InputControl__3Tsx-\",\"EditorButton\":\"Home_EditorButton__zFo1w\",\"EditorBlock3\":\"Home_EditorBlock3__2Ix30\",\"EditorWrap3\":\"Home_EditorWrap3__3fC6H\"};"],"sourceRoot":""}